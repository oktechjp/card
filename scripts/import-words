#!/usr/bin/env node --permission --allow-fs-write=src/utils/words.ts --allow-fs-read=words-dictionary.txt
import { writeFile, readFile } from "fs/promises";

const PASSWORD_LENGTH = 38;
const MIN_ENTROPY = BigInt(Math.pow(255, 12)); // 12 bytes (96bits) of random

const wordlist = (
  await readFile(new URL("../words-dictionary.txt", import.meta.url), "utf-8")
)
  .split("\n")
  .sort((a, b) =>
    a.length > b.length
      ? 1
      : a.length < b.length
        ? -1
        : a > b
          ? 1
          : a < b
            ? -1
            : 0,
  );

const words = [];
let bucketLen = 0;
let bucket = [];
for (const word of wordlist) {
  if (bucketLen < word.length) {
    bucket = [];
    bucketLen = word.length;
    words.push(bucket);
  }
  bucket.push(word);
}

let shortest = Number.MAX_VALUE;
const lengths = [];
const counts = {};
for (const byChars of words) {
  const word = byChars[0];
  console.log(`len=${word.length}: ${byChars.length}`);
  if (word.length < shortest) {
    shortest = word.length;
  }
  lengths.unshift(word.length);
  counts[word.length] = BigInt(byChars.length);
}

function* permutate(current = [], length = 0) {
  for (const len of lengths) {
    const nextLen = length === 0 ? len : length + 1 + len;
    if (nextLen > PASSWORD_LENGTH) {
      continue;
    }
    const next = [...current, len];
    if (nextLen === PASSWORD_LENGTH) {
      yield next;
      continue;
    }
    for (const found of permutate(next, nextLen)) {
      yield found;
    }
  }
}

let permutations = Array.from(permutate());
while (permutations.length > 0) {
  let tooSmall = 0;
  const permutationCount = BigInt(permutations.length);
  const bigEnough = [];

  for (const permutation of permutations) {
    let entropy = permutationCount;
    for (const charLen of permutation) {
      entropy *= counts[charLen];
    }
    if (entropy >= MIN_ENTROPY) {
      bigEnough.push(permutation);
    } else {
      tooSmall += 1;
    }
  }
  permutations = bigEnough;
  if (tooSmall === 0) {
    break;
  }
}

let str = `
/**
 * Generated from "words-dictionary.txt" using â†’ npm run import:words
 **/
export const words = ${JSON.stringify(words)}
export const permutations = [\n`;
for (const permutation of permutations) {
  str += `  [${permutation.map((len) => len - shortest).join(", ")}],`;
}
str += "\n]\n";

await writeFile(new URL("../src/utils/words.ts", import.meta.url), str);
