#!/usr/bin/env node --permission --allow-fs-write=src/utils/password-dict-*.ts --allow-fs-read=dict-*.txt
import { writeFile, readFile } from "fs/promises";

const BASE = new URL("..", import.meta.url);

for (const wordSet of [
  {
    humanName: "Words",
    dictFile: "dict-words.txt",
    outFile: "src/utils/password-dict-words.ts",
    constName: "passwordWords",
    targetLength: 49,
  },
]) {
  const { humanName, dictFile, targetLength, outFile, constName } = wordSet;
  const wordlist = (await readFile(new URL(dictFile, BASE), "utf-8"))
    .split("\n")
    .sort((a, b) =>
      a.length > b.length
        ? 1
        : a.length < b.length
          ? -1
          : a > b
            ? 1
            : a < b
              ? -1
              : 0,
    );
  const words = [];
  let bucketLen = 0;
  let bucket = [];
  for (const word of wordlist) {
    if (bucketLen < word.length) {
      bucket = [];
      bucketLen = word.length;
      words.push(bucket);
    }
    bucket.push(word);
  }

  let shortest = Number.MAX_VALUE;
  const lengths = [];
  const counts = {};
  for (const byChars of words) {
    const word = byChars[0];
    console.log(`len=${word.length}: ${byChars.length}`);
    if (word.length < shortest) {
      shortest = word.length;
    }
    lengths.unshift(word.length);
    counts[word.length] = BigInt(byChars.length);
  }

  function* permutate(current = [], length = 0) {
    for (const len of lengths) {
      const nextLen = length === 0 ? len : length + 1 + len;
      if (nextLen > targetLength) {
        continue;
      }
      const next = [...current, len];
      if (nextLen === targetLength) {
        yield next;
        continue;
      }
      for (const found of permutate(next, nextLen)) {
        yield found;
      }
    }
  }

  let str = `
/**
 * Generated from "${outFile}" using â†’ npm run import:words
 **/
import { RandomWords } from '@/utils/crypto';

const words: string[][] = ${JSON.stringify(words, null, 2)}
export const ${constName} = new RandomWords("${humanName}", ${targetLength}, [
`;
  for (const permutation of permutate()) {
    str += `  [${permutation.map((len) => len - shortest).join(", ")}],\n`;
  }
  str += `
  ].map((counts) => counts.map(count => words[count]))
);
`;

  await writeFile(new URL(outFile, BASE), str);
}
